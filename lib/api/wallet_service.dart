import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:alevet_market/api/utils/api_utils.dart';

Future<http.Response> sendPaymentDetails(String amount, String utrNumber) async {
  // ЁЯФР рдЯреЛрдХрди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
  SharedPreferences prefs = await SharedPreferences.getInstance();
  String? token = prefs.getString('auth_token');
  final name = prefs.getString('userName') ?? '';
  if (token == null) {
    throw Exception("User not authenticated.");
  }

  // ЁЯз╛ рдкреЗрдореЗрдВрдЯ рдбреЗрдЯрд╛ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
  final data = {
    'name': name,
    'amount': amount,
    'payment_method': 'UPI',
    'transaction_id': utrNumber,
  };

  // ЁЯУи POST рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬреЗрдВ (рдЯреЛрдХрди рдХреЗ рд╕рд╛рде)
  final response = await ApiUtils.post(
    '/user/payment',
    data,
    headers: {'Authorization': 'Bearer $token'},
  );
  // тЬЕ рдпрд╛ тЭМ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
  if (response.statusCode == 200 || response.statusCode == 201) {
    print("тЬЕ Payment details sent successfully:  ${response.statusCode} - ${response.body}");

  } else {
    print(
      "тЭМ Failed to send payment details: ${response.statusCode} - ${response.body}",
    );
  }

  return response;
}



Future<http.Response> sendWithdrawalDetails(String amount) async {
  // ЁЯФР рдЯреЛрдХрди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
  SharedPreferences prefs = await SharedPreferences.getInstance();
  String? token = prefs.getString('auth_token');
  final name = prefs.getString('userName') ?? '';

  // ЁЯПж рдмреИрдВрдХ рд╡рд┐рд╡рд░рдг рдкреНрд░рд╛рдкреНрдд рдХрд░реЗ
  //     await prefs.setString('bank_account', account);
    // await prefs.setString('bank_ifsc', ifsc);
    // await prefs.setString('bank_account_type', accountType);
  // ЁЯПж рдмреИрдВрдХ рд╡рд┐рд╡рд░рдг рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
  final ifscCode = prefs.getString('bank_ifsc') ?? '';
  final accountNumber = prefs.getString('bank_account') ?? '';
  // final accountType = prefs.getString('bank_account_type') ?? '';

  if (token == null) {
    throw Exception("User not authenticated.");
  }

  // ЁЯз╛ рдкреЗрдореЗрдВрдЯ рдбреЗрдЯрд╛ рддреИрдпрд╛рд░ рдХрд░реЗрдВ
  final data = {
    'name': name, 
    'amount': amount,
    'ifsc_code': ifscCode,
    'account_number': accountNumber,
  };

  // ЁЯУи POST рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬреЗрдВ (рдЯреЛрдХрди рдХреЗ рд╕рд╛рде)
  final response = await ApiUtils.post(
    '/user/withdrawal',
    data,
    headers: {'Authorization': 'Bearer $token'},
  );
  // тЬЕ рдпрд╛ тЭМ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
  if (response.statusCode == 200 || response.statusCode == 201) {
    print("тЬЕ Payment details sent successfully:  ${response.statusCode} - ${response.body}");

  } else {
    print(
      "тЭМ Failed to send payment details: ${response.statusCode} - ${response.body}",
    );
  }

  return response;
}

Future<http.Response> getTransactionHistory() async {
  // ЁЯФР рдЯреЛрдХрди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
  SharedPreferences prefs = await SharedPreferences.getInstance();
  String? token = prefs.getString('auth_token');
  if (token == null) {
    throw Exception("User not authenticated.");
  }

  // ЁЯУи GET рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬреЗрдВ (рдЯреЛрдХрди рдХреЗ рд╕рд╛рде)
  final response = await ApiUtils.get(
    '/user/transaction-history',
    headers: {'Authorization': 'Bearer $token'},
  );

  // тЬЕ рдпрд╛ тЭМ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рд╣реИрдВрдбрд▓ рдХрд░реЗрдВ
  if (response.statusCode == 200) {
    print("тЬЕ Transaction history retrieved successfully: ${response.statusCode} - ${response.body}");
  } else {
    print(
      "тЭМ Failed to retrieve transaction history: ${response.statusCode} - ${response.body}",
    );
  }

  return response;
}

